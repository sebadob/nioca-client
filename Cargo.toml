[workspace]
resolver = "2"
members = [
    "src/nioca-actix",
    "src/nioca-axum",
    "src/nioca-client",
    "src/nioca-client-app",
    "src/nioca-client-backend",
    "src/nioca-client-frontend",
    "src/nioca-common",
    "src/nioca-generic",
]

[workspace.package]
version = "0.5.0-20231114"
edition = "2021"
authors = ["Sebastian Dobe <sebastiandobe@mailbox.org>"]
license = "Apache-2.0"

[profile.dev]
# this abort in dev mode helps spotting hydration panics way faster
panic = "abort"

[profile.release]
codegen-units = 1
lto = true
strip = true
panic = 'abort'

[profile.wasm-release]
inherits = "release"
opt-level = 'z'

[workspace.dependencies]
# common deps
#anyhow = "1"
#chrono = { version = "0.4", default-features = false, features = ["alloc", "clock", "serde", "std"] }
#dotenvy = "0.15"
#once_cell = "1.17"
#reqwest = { version = "0.11", default-features = false, features = ["json", "rustls-tls", "rustls-tls-webpki-roots"] }
#serde = { version = "1", features = ["derive"] }
## todo we probably do not need 'full' for everything -> split up by feature
#tokio = { version = "1.26", features = ["full"] }
#tracing = "0.1"
#tracing-subscriber = { version = "0.3", features = ["env-filter", "tracing"] }

## axum
#axum-server = { version = "0.5", optional = true, features = ["tls-rustls"] }
#
## cli
#base64 = { version = "0.21", optional = true }
#clap = { version = "4.1", optional = true, features = ["derive"] }
#ctrlc = { version = "3.4.1", optional = true, features = ["termination"] }
#flume = { version = "0.11", optional = true }
#headers = { version = "0.3", optional = true }
#hex = { version = "0.4", optional = true }
#home = { version = "0.5", optional = true }
#ring = { version = "0.17", optional = true }
#rpassword = { version = "7.2", optional = true }
#serde_json = { version = "1", optional = true }
#ssh-key = { version = "0.6", optional = true }
#x509-parser = { version = "0.15", optional = true, features = ["ring", "validate", "verify"] }

[[workspace.metadata.leptos]]
name = "nioca-client"
edition = "2021"
bin-package = "nioca-client"
lib-package = "nioca-client-frontend"

# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "nioca-client"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to static
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-static>/app.css
style-file = "src/nioca-client-app/style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-static-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "src/nioca-client-app/public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "tests/end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false

# The environment Leptos will run in, usually either "DEV" or "PROD"
#env = "DEV"

# Optimize wasm compile target
lib-profile-release = "wasm-release"
